package com.test.question;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class Q066 {
	public static void main(String[] args) {
		int[] nums = new int[6];

		int index = 0;
		int randomNum = 0;

		// 난수 생성하기

		// 생성된 난수가 중복인가?

		// 아니라면 배열에 넣기

		// 맞다면 새로운 난수 생성하기

		// 언제까지 난수 생성해? 배열이 가득 찰 때까지

		while (index < nums.length) {
			randomNum = (int) (Math.random() * 45) + 1;

			if (index == 0) { // 바로 삽입
				nums[index++] = randomNum;
//				continue;
			} else { // 중복 확인
				// 현재 배열의 값을 0 ~ index까지 탐색 -> 메소드
				boolean isSame = findSameNum(index, randomNum, nums);

				if (isSame) {
					
				} else {

				}
			}
		}

//		useSet(nums);
	}

	private static boolean findSameNum(int index, int randomNum, int[] nums) {
		for (int i = 0; i <= index; i++) {
			if (randomNum == nums[i]) { // 중복인 경우
				return true;	// true 반환
			}
		}

		return false;	// 다 돌았는데도 겹치지 않았다 - false 반환
	}

	private static void useSet(int[] nums) {
		Set<Integer> set = new HashSet<>();

		int index = 0;
		int randomNum = 0;

		while (index < nums.length) {
			randomNum = (int) (Math.random() * 45) + 1;

			if (set.contains(randomNum))
				continue;

			set.add(randomNum);
			nums[index++] = randomNum;
		}

		Arrays.sort(nums);

		System.out.println(Arrays.toString(nums));
	}
}
