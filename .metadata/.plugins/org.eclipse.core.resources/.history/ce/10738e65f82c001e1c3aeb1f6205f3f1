package com.test.java;

public class Ex35_String {
	public static void main(String[] args) {

		// Ex35_String.java

		/*
		 * 문자열 
		 * - 물리적으로는 참조형이지만, 약간의 값형의 성질을 가진다.
		 * - 박쥐
		 * 
		 * 1. 메모리의 공간은 한 번 할당되면 더 이상 늘리거나 줄일 수 없다. 2. "문자열은 불변(Immutable)이다." > 한 번
		 * 만들어진 문자열은 절대 수정할 수 없다. 3. 문자열은 참조형이다.
		 * 
		 * 
		 */

		m1();

	}// main

	private static void m1() {

		// ** 모든 값형은 어떤 데이터를 넣더라도 공간의 크기가 불변이다.

		int n1 = 10; // 4byte
		int n2 = 2000000000; // 4byte

		//하나의 메소드 안에서 선언된 상수는 같이 사용한다.
		String s1 = "홍길동"; // 2*3=6byte
		String s2 = "안녕하세요. 홍길동입니다."; // 2*14=28byte

		String s3 = "홍길동";
		String s4 = "홍";
		s4 = s4 + "길동";

		// 문자열을 리터럴로 할당할 경우 같은 주소를 공유한다.
		// new 생성자를 사용할 경우, 문자열이 같더라도 새롭게 생성하여 주소가 달라진다.
		// 같은 주소를 왜 공유할까?
		// 문자열이 거대해지면 사용하는 메모리가 커진다. 이를 매번 새로 생성할 경우 메모리 사용이 과다해진다.
		// 메모리를 아끼고자 공유하여 사용한다.
		System.out.println(s1 == s3); // true -> 절대 사용 금지
		System.out.println(s1 == s4); // false

		System.out.println(s1.equals(s3)); // true
		System.out.println(s1.equals(s4)); // false

		s1 = s1 + "님"; // 홍길동 > 홍길동님

		System.out.println(s1); // 홍길동님 -> 새로운 "홍길동님" 생성 -> "홍길동님"의 주소로 덮어쓰기
		System.out.println(s3); // 홍길동

		// 문자열 수정 시 매번 새로운 문자열이 생성된다.
		// 문자열은 불변한다.

	}
}
